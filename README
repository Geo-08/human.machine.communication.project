To run the program successfully, the small or medium directory must be in the same directory as the executable.
This project contains two others executables that assists the main executable, the first one reads the information in the small or medium directory and pass it to the main, while
the second compares the results printed by the main executable with the result file.
The first executable is necessary, but the second is optional.
Some shortcuts for the execution of project2:

make run_small: ./script small | ./project2
make run_small_cmp: ./script small | ./project2 | ./cmp small
make run_medium: ./script medium | ./project2
make run_medium_cmp: ./script medium | ./project2 | ./cmp medium

Total time for the execution
small:Around 5 seconds
medium:Around 286 seconds, a little less than 5 minutes

Execution time with query optimizer, no parallel programming.
small:Around 5 seconds closer to 6.
medium:Around 273 seconds.

medium was tested on a system with 8GB, due to query "7 7 0|0.1=1.2&1.2=2.0&1.0>11263845|0.2 2.0" causing a swap to disk to occure it was ommited from the test


The following is an explanation of the functions that were used to implement radix sort and generally the sorting part of the project,expanded to include query computation.
The structs we will be working with are tuple which are comprised by
unsigned 64 bit integer (key), another unsigned 64 bit integer (key2)  and
an array of unsigned 64 bit integers payload.

relation which are an array of tuples and an unsigned 64 bit integer holding the number of tuples in the array, an array of integers showing which relation tables are part of the relation, an integer holding their number,3 integers holding information of which relation the key originates from, which collumn, as well as if the relation is sorted in regards to the key.

tableStorage, which is a array of Tables, a Table is a 2D array of uint64_t sized numbers.

inbetween, which is an array of relations and an integer keeping their number.

relation_collumn, which is an integer to indicate a relation and an integer to indicate a collumn in the relation

filter, which is relation_column, a character to indicate the opperation, and an unsigned 64 bit integer for the number which will be used for filtering.

unity, has 2 relation_collumns, information for merge join predicates.

query, arrays of integers, filters, unitys and relation_collumns as well as integers keeping the number of each are used to store a query.



void read_query(query* qu,char* tq)
parses the string tq and stores it as a query which qu points at at the end.

uint64_t* query_comp(TableStorage* store,char* tq)
computes the query pointed by tq, store is the table where the relation tables are stored.
Predicates are executed starting from filters, moving on to merge join and finally calculating the sums.
Every time a relation table is requested it's first searched on the inbetween structure of relation arrays, if it's not found it's added in it, then opperations are done upon it. During merge join assuming they aren't the same relation or haven't been merged before, they will both be added in the inbetween structure sorted and merged, in which the result will be saved in a new relation in the inbetween structure and the two relations will be removed from it.

Query optimizer explanation
For the Query optimizer a structure statistic exists that has an unassigned 64 bit integer for every stat of a row of a relation, lowest value, highest value, number of distinct values, total number of values.
In order to find the best order of join predicates to be computed a structure node is utilized. Said structure contains an array holding the different relations that are saved in the inbetween results as well as their statistics and the join queries that have been executed so far as well as pointing to the children queries when expanded. Structure and code are in the opttree.c and opttree.h files.

query* opt_query(TableStorage* store,char* tq);

opt_query takes in the storage where the relation tables and their statistics are stored as well as a query in string form as it's parameteres.
It will start by reading using the read_query function to parse the string and return it's information in structure query form. It will then initialize
a node which will be the root of the expanding tree to find the best join query order. Firstly the statistics for the filters will be applied and calculated and their collected result serving as the starting node of the tree. The tree will then expand producing one child for every join query,
the algorithm will then check which of the three children has the least number of total tuples and expand it further repeating the process till the optimal order is found.


node* find_best_child(node* nod);
Finds the best child to be expanded from the children of the node that pointer nod points to and returns it. The best child being the one with the least amount of tuples.

void expand_node(node* nod,unity* joins,int join_num,TableStorage* store,int* rel_nums);
finds the children of nod,one child per element in the array joins.


void exec_pred(node* nod,unity join,int* rel_nums,TableStorage* store);
executes the join predicate to find the new statistics for the node nod.



int sort(relation *rel)
sort sorts the relation that is pointed by rel and by the end it points to a sorted relation.
if the relation to begin with is a shorter than 64KB it simply uses quicksort to sort it out.
Otherwise it creates a new empty relation relation rel2 and calls int radix_sort(relation *rel,relation *rel2, int depth,uint64_t start)
which at the end rel2 points at a sorted version of rel and it's contents are coppied to rel.
returns 0 on success.

int radix_sort(relation *rel,relation *rel2, int depth,uint64_t start)
creates a histogram of rel (hist) and an aggregate histogram (psum). 8 bits from the key value of a tuple is used in the creation of the histogram and depth dictates which those 8 bits will be, starting from depth = 0 when it's called taking the 8 leftmost bits. start dictates what the first value will be for psum[0] during the creation of the aggregate histogram.
using the histogram and aggregate histogram rel2 becomes a partially sorted version of rel.
Then it runs through every "bucket" as recognized by the histogram and checks weather it's size is less than 64kb or if it has reached depth of 8 where all bits have been used using recursion to get smaller buckets and if either is true it uses quicksort to sort the "bucket" by copying the contents of the "bucket" in rel sorting it with quicksort and copying the result back to the right place in rel2.
Otherwise the contents of the "bucket" will be copied again to rel and radix_sort will be called again with depth incremented by one and start taking the value of where the "bucket" starts in rel2.
Eventually rel2 becomes sorted.
returns 0 on success.
NOTE: Changes have been made so that the number of bits from the key used for the histograms and other functions can be changed, in order to change it switch the define value in tuple.h file. 

uint64_t** readArray(char* fileName, int* columns, int* rows, int* key)
creates a 2D array based on the data of fileName. The file must contain in order the size of columns and rows, the key, then the data.

void deleteArray(uint64_t** array, int size)
deletes a 2D array.

relation* createRelation(uint64_t** table, int size, int key)
creates a relation based on the table and the key.

relation* createRandomRelation(void)
creates a relation with size from 0 to 9999 with keys and payloads ranging from 4294966795 to 4294967794.

relation* readRelation(char* fileName)
reads a file from dataset, then creates a relation based on the data.

void deleteRelation(relation* rel)
frees the data of a relation.

int copy_relation (relation *to,uint64_t start,uint64_t size,relation *from)
copies 'size' number of tuples from relation 'from' to relation 'to' starting from to->tuples[start].
returns 0 on success.

quicksort, partition, swap are used for the implementation of quicksort. only notable aspect is that due to the nature of using unsigned integers,
there has been a need to take care when q-1 and q+1 happens in case q is 0 or the maximum value that can be stored in a 64 bit unsigned integer. respectively.

int isolate(relation *rel,uint64_t start,uint64_t size,relation *out)
copies elements from rel at point of start and number of 'size' to 'out', meant to isolate a 'bucket' in order to be sorted.
returns 0 on success.

int create_hist (relation *rel,uint64_t* hist,int n)
creates the histogram of rel, taking 8 bits from the key value of tuples, n dictating which 8 bits will be used.
returns 0 on success.

int create_psum (uint64_t *hist,uint64_t* psum,uint64_t start)
creates the aggregate histogram, based on the histogram, psum[0] = start and the rest follow from there.
returns 0 on success.

void check_sorting(relation *rel,int length)
checks if the 'length' first elements of a relation are sorted based on the key value of the tuple array.checks the whole relation if length is 0.
prints related message.

void print_relation(relation *rel, int length)
prints 'length' first elements from relation rel on screen, all of them if length is 0.

void createBuffer(buffer **Buff)
builds a struct buffer in *Buff

void join(uint64_t payloadR, uint64_t payloadS, buffer **Buff)
copies the payloads inside the buffer starting from the last add, if there is no more memory left creates another buffer

buffer *merge(relation *relR, relation *relS)
for each element.key in relR from the start search the relS for same element.key.
comments will help understand

buffer *SortMergeJoin(relation* relR, relation* relS)
sorts the relations and returns the buffer with merged result

void printresult(buffer *Buff)
prints the buffer

void deletebuffer(buffer *Buff)
frees the buffer





